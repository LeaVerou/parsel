const e={attribute:/\[\s*(?:(?<namespace>\*|[-\w]*)\|)?(?<name>[-\w\u{0080}-\u{FFFF}]+)\s*(?:(?<operator>\W?=)\s*(?<value>.+?)\s*(?<caseSensitive>[iIsS])?\s*)?\]/gu,id:/#(?<name>(?:[-\w\u{0080}-\u{FFFF}]|\\.)+)/gu,class:/\.(?<name>(?:[-\w\u{0080}-\u{FFFF}]|\\.)+)/gu,comma:/\s*,\s*/g,combinator:/\s*[\s>+~]\s*/g,"pseudo-element":/::(?<name>[-\w\u{0080}-\u{FFFF}]+)(?:\((?<argument>¶+)\))?/gu,"pseudo-class":/:(?<name>[-\w\u{0080}-\u{FFFF}]+)(?:\((?<argument>¶+)\))?/gu,type:/(?:(?<namespace>\*|[-\w]*)\|)?(?<name>[-\w\u{0080}-\u{FFFF}]+)|\*/gu},t=new Set(["pseudo-class","pseudo-element"]),n=new Set([...t,"attribute"]),s=new Set(["combinator","comma"]),r=new Set(["not","is","where","has","matches","-moz-any","-webkit-any","nth-child","nth-last-child"]),l={"nth-child":/(?<index>[\dn+-]+)\s+of\s+(?<subtree>.+)/};r["nth-last-child"]=l["nth-child"];const o=Object.assign({},e);function u(e,t){let n="",s=[];for(;t<e.length;t++){let r=e[t];if("("===r)s.push(r);else if(")"===r){if(!(s.length>0))throw new Error("Closing paren without opening paren at "+t);s.pop()}if(n+=r,0===s.length)return n}throw new Error("Opening paren without closing paren")}function i(e,t){if(!e)return[];var n=[e];for(var r in t){let e=t[r];for(var l=0;l<n.length;l++){var o=n[l];if("string"==typeof o){e.lastIndex=0;var u=e.exec(o);if(u){let e=u.index-1,t=[],s=u[0],i=o.slice(0,e+1);i&&t.push(i),t.push({type:r,content:s,...u.groups});let a=o.slice(e+s.length+1);a&&t.push(a),n.splice(l,1,...t)}}}}let i=0;for(let e=0;e<n.length;e++){let t=n[e],r=t.length||t.content.length;"object"==typeof t&&(t.pos=[i,i+r],s.has(t.type)&&(t.content=t.content.trim()||" ")),i+=r}return n}function a(s){if(!s)return null;s=s.trim();let r=[];s=s.replace(/(['"])(\\\1|.)+?\1/g,((e,t,n,s)=>(r.push({str:e,start:s}),t+"§".repeat(n.length)+t)));let l,a=[],c=0;for(;(l=s.indexOf("(",c))>-1;){let e=u(s,l);a.push({str:e,start:l}),s=s.substring(0,l)+"("+"¶".repeat(e.length-2)+")"+s.substring(l+e.length),c=l+e.length}let p=i(s,e);function f(e,t,n){for(let s of e)for(let e of p)if(n.has(e.type)&&e.pos[0]<s.start&&s.start<e.pos[1]){let n=e.content;if(e.content=e.content.replace(t,s.str),e.content!==n){o[e.type].lastIndex=0;let t=o[e.type].exec(e.content).groups;Object.assign(e,t)}}}return f(a,/\(¶+\)/,t),f(r,/(['"])§+?\1/,n),p}function c(e,{list:t=!0}={}){if(t&&e.find((e=>"comma"===e.type))){let t=[],n=[];for(let s=0;s<e.length;s++)if("comma"===e[s].type){if(0===n.length)throw new Error("Incorrect comma at "+s);t.push(c(n,{list:!1})),n.length=0}else n.push(e[s]);if(0===n.length)throw new Error("Trailing comma");return t.push(c(n,{list:!1})),{type:"list",list:t}}for(let t=e.length-1;t>=0;t--){let n=e[t];if("combinator"===n.type){let s=e.slice(0,t),r=e.slice(t+1);return{type:"complex",combinator:n.content,left:c(s),right:c(r)}}}return 0===e.length?null:1===e.length?e[0]:{type:"compound",list:[...e]}}function p(e,t,n,s){if(e){if("complex"===e.type)p(e.left,t,n,e),p(e.right,t,n,e);else if("compound"===e.type)for(let s of e.list)p(s,t,n,e);else e.subtree&&n&&n.subtree&&p(e.subtree,t,n,e);t(e,s)}}function f(e,{recursive:t=!0,list:n=!0}={}){let s=a(e);if(!s)return null;let o=c(s,{list:n});return t&&p(o,(e=>{if("pseudo-class"===e.type&&e.argument&&r.has(e.name)){let t=e.argument;const n=l[e.name];if(n){const s=n.exec(t);if(!s)return;Object.assign(e,s.groups),t=s.groups.subtree}t&&(e.subtree=f(t,{recursive:!0,list:!0}))}})),o}function h(e,t){return t=t||Math.max(...e)+1,e[0]*t**2+e[1]*t+e[2]}function g(e,{format:t="array"}={}){let n="object"==typeof e?e:f(e,{recursive:!0});if(!n)return null;if("list"===n.type){let e=10,t=n.list.map((t=>{let n=g(t);return e=Math.max(e,...n),n})),s=t.map((t=>h(t,e)));return t[function(e){let t=e[0],n=0;for(let s=0;s<e.length;s++)e[s]>t&&(n=s,t=e[s]);return 0===e.length?-1:n}(s)]}let s=[0,0,0];return p(n,(e=>{if("id"===e.type)s[0]++;else if("class"===e.type||"attribute"===e.type)s[1]++;else if("type"===e.type&&"*"!==e.content||"pseudo-element"===e.type)s[2]++;else if("pseudo-class"===e.type&&"where"!==e.name)if(r.has(e.name)&&e.subtree){g(e.subtree).forEach(((e,t)=>s[t]+=e))}else s[1]++})),s}function m(e){if("object"==typeof e){let t="";switch(e.type){case"compound":t=e.list.reduce(((e,t)=>e+m(t)),t);break;case"attribute":case"id":case"class":case"pseudo-element":case"pseudo-class":case"type":t+=e.content;break;case"complex":t+=m(e.left),t+=e.combinator,t+=m(e.right);break;case"list":t=e.list.map(m).join(", ")}return t}return null}o["pseudo-element"]=RegExp(e["pseudo-element"].source.replace("(?<argument>¶+)","(?<argument>.+?)"),"gu"),o["pseudo-class"]=RegExp(e["pseudo-class"].source.replace("(?<argument>¶+)","(?<argument>.+)"),"gu");export{r as RECURSIVE_PSEUDO_CLASSES,l as RECURSIVE_PSEUDO_CLASSES_ARGS,e as TOKENS,s as TRIM_TOKENS,u as gobbleParens,c as nestTokens,f as parse,g as specificity,h as specificityToNumber,m as stringify,a as tokenize,i as tokenizeBy,p as walk};
